C51 COMPILER V9.60.0.0   MAIN                                                              09/19/2022 14:27:12 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          /* ********************************************************************
   2          FILE                   : main.c
   3          
   4          PROGRAM DESCRIPTION    : Program for the 8051 for a DC Motor control through DC Driver is given by Microco
             -ntroller.
   5                                   DC Motor control command is entered in UART terminal. For DC Motor command to sto
             -p running
   6                                   Enter in UART Terminal : "MOTOR 1 OFF" , for DC Motor command to trigger running 
             -in clockwise direction : "MOTOR 1 ON"                                          
   7             
   8          AUTHOR                : K.M. Arun Kumar alias Arunkumar Murugeswaran
   9             
  10          KNOWN BUGS            : 
  11          
  12          NOTE                  :                   
  13                                              
  14          CHANGE LOGS           : 
  15          
  16          *****************************************************************************/
  17          
  18          #include "main.h"
  19          
  20          typedef enum 
  21          {
  22            MOTOR_ALREADY_OFF = NUM_ERR_STATUS, MOTOR_TURNED_OFF, MOTOR_ALREADY_RUN_CLOCKWISE, MOTOR_TURNED_CLOCKWISE
             -, 
  23              ERR_MOTOR_UNKNOWN_STATE, ERR_MOTOR_ID_INVALID, ERR_CMD_MOTOR_TURN_INVALID 
  24          } appl_status_err_t;
  25                  
  26          typedef struct 
  27          {
  28             unsigned int motor_id            : 3;
  29             unsigned int cur_fsm_motor_state : 3;  
  30             unsigned int                     : 2;
  31          }  motor_data_t;   
  32          
  33          static motor_data_t motor_ids[NUM_MOTORS];      
  34          static char motor_id_clockwise_cmd_str[MOTOR_ID_NUM_CHARS + 3], motor_id_off_cmd_str[MOTOR_ID_NUM_CHARS + 
             -4],
  35            motor_cmd_rcvd_str[STR_MAX_NUM_CHARS];
  36          static const char motor_1_str[] = "MOTOR 1 ", motor_off_cmd_str[] = "OFF", motor_clockwise_cmd_str[] = "ON
             -";  
  37          static int motor_cmd_rcvd_str_num_chars = 0; 
  38          
  39          static unsigned int UART_Motor_Menu(const unsigned char motor_id);
  40          static unsigned int FSM_Motor_Proc(const unsigned char motor_id, const unsigned char motor_cmd);
  41          static unsigned int FSM_Motor_Cmd_Proc(const unsigned char motor_id, const unsigned char motor_cmd);
  42          static unsigned int DC_Motor_Init(const unsigned char cur_motor_id, const unsigned char init_fsm_motor_sta
             -te);
  43          
  44          /*------------------------------------------------------------*-
  45          FUNCTION NAME  : main
  46          
  47          DESCRIPTION    :          
C51 COMPILER V9.60.0.0   MAIN                                                              09/19/2022 14:27:12 PAGE 2   

  48                          
  49          INPUT          : none
  50          
  51          OUTPUT         : 
  52          
  53          NOTE           : 
  54          -*------------------------------------------------------------*/
  55          
  56          void main(void)
  57          {
  58   1         unsigned char ret_status;
  59   1         char rx_char;         
  60   1         
  61   1           /* ========= begin : USER CODE INITIALIZE ========== */
  62   1         ERROR_LED = 0;         //output for MCU   
  63   1         UART_Init(); 
  64   1           DC_Motor_Init(0, FSM_MOTOR_IN_OFF);   
  65   1         Str_Join(motor_id_off_cmd_str, motor_1_str, motor_off_cmd_str);
  66   1         Str_Join(motor_id_clockwise_cmd_str, motor_1_str, motor_clockwise_cmd_str);  
  67   1         FSM_Motor_Cmd_Proc(0, MOTOR_1_INIT_CMD);  
  68   1            
  69   1         /* ========= end : USER CODE INITIALIZE ========== */
  70   1           
  71   1           while(1) // Super Loop
  72   1           {
  73   2           if((motor_cmd_rcvd_str_num_chars + 1) >= STR_MAX_NUM_CHARS )
  74   2           {
  75   3             ERROR_LED = STATE_ON;
  76   3             return;
  77   3           }
  78   2           rx_char = UART_Rx_Char();       
  79   2           switch(rx_char)  
  80   2           {
  81   3               case BACKSPACE_CHAR:  
  82   3                   //backspace char received, delete previous received char
  83   3                   if(motor_cmd_rcvd_str_num_chars > 0)
  84   3                 {
  85   4                    UART_Tx_Char(rx_char);
  86   4                  motor_cmd_rcvd_str[motor_cmd_rcvd_str_num_chars] = NULL_CHAR;       
  87   4                     --motor_cmd_rcvd_str_num_chars;
  88   4               }          
  89   3             break;
  90   3                   case TERMINATOR_CHAR:
  91   3                UART_Tx_Char(rx_char);
  92   3                motor_cmd_rcvd_str[motor_cmd_rcvd_str_num_chars] = NULL_CHAR;
  93   3                UART_Tx_Str("Entered Motor command : ");
  94   3                UART_Tx_Str(motor_cmd_rcvd_str);
  95   3                UART_Tx_Char(NEXT_LINE_CHAR);
  96   3              if((ret_status = Str_Cmp(motor_1_str, motor_cmd_rcvd_str, 0, MOTOR_ID_NUM_CHARS )))
  97   3              {
  98   4                  ret_status = ERR_MOTOR_ID_INVALID;    
  99   4                          rx_char = NUM_MOTORS;
 100   4              }         
 101   3              else 
 102   3              {
 103   4                if((ret_status = Str_Cmp(motor_id_clockwise_cmd_str, motor_cmd_rcvd_str, MOTOR_ID_NUM_CHARS, (STR_MAX
             -_NUM_CHARS - MOTOR_ID_NUM_CHARS))) == 0)
 104   4                   ret_status = CMD_MOTOR_TURN_CLOCKWISE;           
 105   4                  else if((ret_status = Str_Cmp(motor_id_off_cmd_str, motor_cmd_rcvd_str, MOTOR_ID_NUM_CHARS, (STR_M
             -AX_NUM_CHARS - MOTOR_ID_NUM_CHARS))) == 0 )           
 106   4                         ret_status = CMD_MOTOR_TURN_OFF;  
 107   4                        else
C51 COMPILER V9.60.0.0   MAIN                                                              09/19/2022 14:27:12 PAGE 3   

 108   4                       ret_status = ERR_CMD_MOTOR_TURN_INVALID;
 109   4                  //get motor id from received motor cmd, since only on motor, so only one valid motor id = 0      
 110   4                rx_char = 0;     
 111   4              }
 112   3              FSM_Motor_Cmd_Proc(rx_char, ret_status);                  
 113   3               break;     
 114   3                   default:
 115   3                UART_Tx_Char(rx_char);
 116   3                motor_cmd_rcvd_str[motor_cmd_rcvd_str_num_chars] = rx_char;
 117   3                ++motor_cmd_rcvd_str_num_chars; 
 118   3             }             
 119   2         }     
 120   1         return; 
 121   1      }
 122          
 123          /*------------------------------------------------------------*
 124          FUNCTION NAME  : UART_Motor_Menu
 125          
 126          DESCRIPTION    :
 127                          
 128          INPUT          : 
 129          
 130          OUTPUT         : 
 131          
 132          NOTE           : 
 133          
 134          Func ID        :   
 135          -*------------------------------------------------------------*/
 136          unsigned int UART_Motor_Menu(const unsigned char motor_id)
 137          {
 138   1        motor_data_t *cur_motor_id_ptr; 
 139   1        unsigned int ret_status = SUCCESS;
 140   1        unsigned char cur_motor_id ;
 141   1        
 142   1        motor_cmd_rcvd_str_num_chars = 0;
 143   1          if(((ret_status = Str_Fill_Char(motor_cmd_rcvd_str, STR_MAX_NUM_CHARS, NULL_CHAR))) != SUCCESS)
 144   1             return FAILURE; 
 145   1         
 146   1          switch(motor_id)
 147   1        {
 148   2          case 0:
 149   2               UART_Tx_Str(motor_1_str);
 150   2             ret_status = SUCCESS;
 151   2             cur_motor_id = motor_id;                  
 152   2          break;
 153   2              default:
 154   2             ret_status = ERR_MOTOR_ID_INVALID; 
 155   2             cur_motor_id = 0;
 156   2        }
 157   1        for (; cur_motor_id < NUM_MOTORS ; ++cur_motor_id)
 158   1        {
 159   2          UART_Tx_Str(motor_1_str);
 160   2          cur_motor_id_ptr = &motor_ids[cur_motor_id];
 161   2            switch(cur_motor_id_ptr->cur_fsm_motor_state)
 162   2              {
 163   3                 case FSM_MOTOR_IN_UNKNOWN_STATE:       
 164   3                    UART_Tx_Str("in unknown state \r");
 165   3                  ret_status = ERR_MOTOR_UNKNOWN_STATE;
 166   3                 case FSM_MOTOR_IN_OFF:
 167   3                 case FSM_MOTOR_IN_CLOCKWISE: 
 168   3                    if(cur_motor_id_ptr->cur_fsm_motor_state == FSM_MOTOR_IN_OFF)
 169   3                        UART_Tx_Str("is in OFF state \r");         
C51 COMPILER V9.60.0.0   MAIN                                                              09/19/2022 14:27:12 PAGE 4   

 170   3                      else if (cur_motor_id_ptr->cur_fsm_motor_state == FSM_MOTOR_IN_CLOCKWISE)
 171   3                               UART_Tx_Str("is running in clockwise\r");
 172   3                   break;   
 173   3           }
 174   2           if(motor_id < NUM_MOTORS)
 175   2                 break;
 176   2        }
 177   1        
 178   1        if(motor_id < NUM_MOTORS)
 179   1          cur_motor_id = motor_id;
 180   1        else
 181   1          cur_motor_id = 0; 
 182   1        
 183   1        UART_Tx_Str("\rMOTOR COMMAND MENU\r");
 184   1        for (; cur_motor_id < NUM_MOTORS ; ++cur_motor_id)
 185   1        {
 186   2          cur_motor_id_ptr = &motor_ids[cur_motor_id];
 187   2            switch(cur_motor_id_ptr->cur_fsm_motor_state)
 188   2              {
 189   3                 case FSM_MOTOR_IN_UNKNOWN_STATE:             
 190   3                 case FSM_MOTOR_IN_OFF:
 191   3                 case FSM_MOTOR_IN_CLOCKWISE:
 192   3                  UART_Tx_Str(motor_1_str); 
 193   3                     if(cur_motor_id_ptr->cur_fsm_motor_state != FSM_MOTOR_IN_OFF)
 194   3                   {
 195   4                      UART_Tx_Str("to stop running : ");
 196   4                      UART_Tx_Str(motor_id_off_cmd_str);
 197   4                  UART_Tx_Char(NEXT_LINE_CHAR);
 198   4                   } 
 199   3                       if(cur_motor_id_ptr->cur_fsm_motor_state != FSM_MOTOR_IN_CLOCKWISE)  
 200   3                   {        
 201   4                        UART_Tx_Str("to run clockwise : ");
 202   4                        UART_Tx_Str(motor_id_clockwise_cmd_str);  
 203   4                  UART_Tx_Char(NEXT_LINE_CHAR);
 204   4                   }              
 205   3                   break;   
 206   3           }
 207   2           if(motor_id < NUM_MOTORS)
 208   2                 break;
 209   2        }     
 210   1          UART_Tx_Str("\rINPUT: Motor command, Enter : ");  
 211   1          return ret_status; 
 212   1      }
 213          
 214          /*------------------------------------------------------------*
 215          FUNCTION NAME  : FSM_Motor_Proc
 216          
 217          DESCRIPTION    :
 218                          
 219          INPUT          : 
 220          
 221          OUTPUT         : 
 222          
 223          NOTE           : 
 224          
 225          Func ID        :   
 226          -*------------------------------------------------------------*/
 227          unsigned int FSM_Motor_Proc(const unsigned char motor_id, const unsigned char motor_cmd)
 228          {
 229   1        motor_data_t *cur_motor_id_ptr; 
 230   1        const char already_str[] = "already in "; 
 231   1        unsigned char cur_motor_id = motor_id;
C51 COMPILER V9.60.0.0   MAIN                                                              09/19/2022 14:27:12 PAGE 5   

 232   1        unsigned int ret_status = SUCCESS;
 233   1        
 234   1        switch(motor_id)
 235   1        {
 236   2          case 0:
 237   2               UART_Tx_Str(motor_1_str);
 238   2             break;
 239   2              default:
 240   2              UART_Tx_Str("ERR: Invalid Motor ID");
 241   2            cur_motor_id = NUM_MOTORS;
 242   2                  ret_status = ERR_MOTOR_ID_INVALID;
 243   2        } 
 244   1        if(ret_status == SUCCESS)
 245   1        {
 246   2               switch(motor_cmd)
 247   2             {
 248   3               case CMD_MOTOR_TURN_OFF:
 249   3               case CMD_MOTOR_TURN_CLOCKWISE:
 250   3               break;
 251   3               default:
 252   3                  UART_Tx_Str(motor_1_str);
 253   3                  UART_Tx_Str(": Invalid motor command");
 254   3                      ret_status = ERR_CMD_MOTOR_TURN_INVALID;
 255   3           }        
 256   2        } 
 257   1          if(ret_status == SUCCESS) 
 258   1          {   
 259   2              cur_motor_id_ptr = &motor_ids[motor_id]; 
 260   2            switch(cur_motor_id_ptr->cur_fsm_motor_state)
 261   2            {
 262   3              case FSM_MOTOR_IN_OFF:
 263   3                  switch(motor_cmd)
 264   3                  {
 265   4                      case CMD_MOTOR_TURN_OFF: 
 266   4                    UART_Tx_Str(already_str); 
 267   4                     // UART_Tx_Str(motor_off_cmd_str); 
 268   4                  UART_Tx_Str("OFF");
 269   4                    ret_status = MOTOR_ALREADY_OFF; 
 270   4                          break;            
 271   4                  }        
 272   3              break;
 273   3              case FSM_MOTOR_IN_CLOCKWISE:
 274   3                  switch(motor_cmd)
 275   3                {
 276   4                      case CMD_MOTOR_TURN_CLOCKWISE:
 277   4                    UART_Tx_Str(already_str); 
 278   4                  UART_Tx_Str(motor_clockwise_cmd_str);   
 279   4                    ret_status = MOTOR_ALREADY_RUN_CLOCKWISE;   
 280   4                          break;            
 281   4                 }      
 282   3              break;
 283   3              default:
 284   3                 cur_motor_id_ptr->cur_fsm_motor_state = FSM_MOTOR_IN_UNKNOWN_STATE;
 285   3                     UART_Tx_Str("in unknown state\r"); 
 286   3                     UART_Tx_Str(motor_1_str);       
 287   3          }        
 288   2        }
 289   1        if(ret_status == SUCCESS)
 290   1        {
 291   2            UART_Tx_Str("triggered ");
 292   2            switch(motor_cmd)
 293   2            {
C51 COMPILER V9.60.0.0   MAIN                                                              09/19/2022 14:27:12 PAGE 6   

 294   3             case CMD_MOTOR_TURN_OFF:
 295   3                  if(cur_motor_id_ptr->cur_fsm_motor_state != FSM_MOTOR_IN_OFF)
 296   3                  {         
 297   4                MOTOR_1_DRIVER_EN1 = STATE_OFF;
 298   4                MOTOR_1_DRIVER_IN1 = STATE_OFF;
 299   4                MOTOR_1_DRIVER_IN2 = STATE_OFF;
 300   4                MOTOR_1_ON_LED = STATE_OFF;
 301   4                MOTOR_1_CLOCKWISE_LED = STATE_OFF;
 302   4                    cur_motor_id_ptr->cur_fsm_motor_state = FSM_MOTOR_IN_OFF;   
 303   4                        // UART_Tx_Str(motor_off_cmd_str);  
 304   4                          UART_Tx_Str("OFF");            
 305   4                          ret_status = MOTOR_TURNED_OFF;
 306   4                  }
 307   3                 break;
 308   3                 case CMD_MOTOR_TURN_CLOCKWISE:
 309   3                  if(cur_motor_id_ptr->cur_fsm_motor_state != FSM_MOTOR_IN_CLOCKWISE)
 310   3                  {
 311   4                MOTOR_1_DRIVER_EN1 = STATE_ON;
 312   4                MOTOR_1_DRIVER_IN1 = STATE_ON;
 313   4                MOTOR_1_DRIVER_IN2 = STATE_OFF;
 314   4                MOTOR_1_ON_LED = STATE_ON;
 315   4                MOTOR_1_CLOCKWISE_LED = STATE_ON;         
 316   4                          cur_motor_id_ptr->cur_fsm_motor_state = FSM_MOTOR_IN_CLOCKWISE;             
 317   4                    UART_Tx_Str(motor_clockwise_cmd_str); 
 318   4                          ret_status = MOTOR_TURNED_CLOCKWISE;
 319   4                  }
 320   3              break;      
 321   3                  default:
 322   3                     ;          
 323   3            }
 324   2        }
 325   1        UART_Tx_Char(NEXT_LINE_CHAR);
 326   1        if((UART_Motor_Menu(cur_motor_id)) != SUCCESS)
 327   1          ret_status = FAILURE;
 328   1            
 329   1        return ret_status; 
 330   1      }
 331          
 332          /*------------------------------------------------------------*
 333          FUNCTION NAME  : FSM_Motor_Cmd_Proc
 334          
 335          DESCRIPTION    :
 336                          
 337          INPUT          : 
 338          
 339          OUTPUT         : 
 340          
 341          NOTE           : 
 342          
 343          Func ID        :   
 344          -*------------------------------------------------------------*/
 345          unsigned int FSM_Motor_Cmd_Proc(const unsigned char motor_id, const unsigned char motor_cmd)
 346          {
 347   1        unsigned int ret_status = SUCCESS;
 348   1        
 349   1          ret_status = FSM_Motor_Proc(motor_id, motor_cmd); 
 350   1        switch(ret_status)
 351   1        {
 352   2             case MOTOR_ALREADY_OFF:
 353   2             case MOTOR_TURNED_OFF:
 354   2           case MOTOR_ALREADY_RUN_CLOCKWISE:
 355   2             case MOTOR_TURNED_CLOCKWISE:
C51 COMPILER V9.60.0.0   MAIN                                                              09/19/2022 14:27:12 PAGE 7   

 356   2             case SUCCESS:
 357   2                  ERROR_LED = STATE_OFF;
 358   2               break;
 359   2               default:
 360   2                  ERROR_LED = STATE_ON;
 361   2        }
 362   1        
 363   1        return ret_status; 
 364   1      } 
 365            
 366          /*------------------------------------------------------------*
 367          FUNCTION NAME  : DC_Motor_Init
 368          
 369          DESCRIPTION    :
 370                          
 371          INPUT          : 
 372          
 373          OUTPUT         : 
 374          
 375          NOTE           : 
 376          
 377          Func ID        :   
 378          -*------------------------------------------------------------*/
 379          unsigned int DC_Motor_Init(const unsigned char cur_motor_id, const unsigned char init_fsm_motor_state)
 380          {
 381   1        if(cur_motor_id >= NUM_MOTORS || init_fsm_motor_state >= NUM_FSM_MOTOR_STATES)
 382   1        {
 383   2          UART_Tx_Str("ERR: Motor Init \r");
 384   2          return ERR_DATA_NOT_IN_RANGE; 
 385   2        }
 386   1        motor_ids[cur_motor_id].motor_id = cur_motor_id;
 387   1        motor_ids[cur_motor_id].cur_fsm_motor_state = init_fsm_motor_state; 
 388   1        switch(cur_motor_id)
 389   1        {
 390   2          case 0:
 391   2             MOTOR_1_DRIVER_IN1 = 0;
 392   2               MOTOR_1_DRIVER_IN2 = 0;
 393   2               MOTOR_1_DRIVER_EN1 = 0;
 394   2               MOTOR_1_ON_LED = 0;
 395   2               MOTOR_1_CLOCKWISE_LED = 0;        
 396   2          break;
 397   2        }
 398   1        return SUCCESS; 
 399   1      }
 400          
 401          /*------------------------------------------------------------*
 402          FUNCTION NAME  : Delay_in_Micro_Sec
 403          
 404          DESCRIPTION    :
 405                          
 406          INPUT          : 
 407          
 408          OUTPUT         : 
 409          
 410          NOTE           : 
 411          
 412          Func ID        :   
 413          -*------------------------------------------------------------*/
 414          void Delay_in_Micro_Sec(const unsigned long num_micro_seconds)
 415          {
 416   1        unsigned int i = 0;
 417   1        
C51 COMPILER V9.60.0.0   MAIN                                                              09/19/2022 14:27:12 PAGE 8   

 418   1        for (i = 0;  i < num_micro_seconds; ++i);
 419   1        return;   
 420   1      }
 421          
 422          /*------------------------------------------------------------*
 423          FUNCTION NAME  : Delay_in_Milli_Sec
 424          
 425          DESCRIPTION    :
 426                          
 427          INPUT          : 
 428          
 429          OUTPUT         : 
 430          
 431          NOTE           : 
 432          
 433          Func ID        :   
 434          -*------------------------------------------------------------*/
 435          void Delay_in_Milli_Sec(const unsigned long num_milli_seconds)
 436          {
 437   1        unsigned int i = 0;
 438   1        
 439   1        for (i = 0;  i < num_milli_seconds; ++i)
 440   1          Delay_in_Micro_Sec(500UL);
 441   1        return; 
 442   1      }
 443          
 444          
 445          /*------------------------------------------------------------*
 446          FUNCTION NAME  : Str_Fill_Char
 447          
 448          DESCRIPTION    :
 449                          
 450          INPUT          : 
 451          
 452          OUTPUT         : 
 453          
 454          NOTE           : 
 455          
 456          Func ID        :    
 457          -*------------------------------------------------------------*/
 458          unsigned int Str_Fill_Char(char *const dest_str, const unsigned char num_chars, const char fill_char)
 459          {
 460   1        unsigned char index;
 461   1        
 462   1        if(dest_str == NULL_PTR || num_chars > STR_MAX_NUM_CHARS)
 463   1        {
 464   2          UART_Tx_Str("ERR: Str_Fill\r");
 465   2          return ERR_INVALID_DATA;
 466   2        }
 467   1        for (index = 0 ; index < num_chars ; ++index)
 468   1           dest_str[index] = fill_char;
 469   1          dest_str[index] = NULL_CHAR;
 470   1        
 471   1        return SUCCESS;
 472   1      }
 473          
 474          /*------------------------------------------------------------*
 475          FUNCTION NAME  : Str_Cmp
 476          
 477          DESCRIPTION    :
 478                          
 479          INPUT          : 
C51 COMPILER V9.60.0.0   MAIN                                                              09/19/2022 14:27:12 PAGE 9   

 480          
 481          OUTPUT         : 
 482          
 483          NOTE           : 
 484          
 485          Func ID        :    
 486          -*------------------------------------------------------------*/
 487          unsigned int Str_Cmp(const char *const left_str, const char *const right_str, const unsigned char start_ch
             -ar_pos, const unsigned char num_chars_str_cmp)
 488          {
 489   1        unsigned int index;
 490   1        
 491   1        if(left_str == NULL_PTR || right_str == NULL_PTR || (start_char_pos + num_chars_str_cmp) > STR_MAX_NUM_CH
             -ARS)
 492   1        {
 493   2          UART_Tx_Str("ERR: Str_Cmp\r");
 494   2          return (STR_MAX_NUM_CHARS + 1);
 495   2        } 
 496   1        for (index = 0 ; index < num_chars_str_cmp ; ++index)
 497   1        {
 498   2          if((*(left_str + index + start_char_pos)) != (*(right_str + index + start_char_pos)))
 499   2          {
 500   3            /*#ifdef TRACE 
 501   3                UART_Tx_Char(right_str[index + start_char_pos]);
 502   3              UART_Tx_Char(NEXT_LINE_CHAR);
 503   3              #endif */
 504   3            return (index + start_char_pos + 1); 
 505   3          }
 506   2          if ((*(right_str + index + start_char_pos)) == NULL_CHAR)
 507   2             return 0 ;  
 508   2        } 
 509   1         return 0 ;  
 510   1      }
 511          
 512          /*------------------------------------------------------------*
 513          FUNCTION NAME  : Str_Join
 514          
 515          DESCRIPTION    :
 516                          
 517          INPUT          : 
 518          
 519          OUTPUT         : 
 520          
 521          NOTE           : 
 522          
 523          Func ID        :    
 524          -*------------------------------------------------------------*/
 525          unsigned int Str_Join(char *const str_join_str, const char *const left_src_str, const char *const right_sr
             -c_str)
 526          {
 527   1        unsigned char str_join_str_index, src_str_index;
 528   1        
 529   1        if(str_join_str == NULL_PTR || left_src_str == NULL_PTR || right_src_str == NULL_PTR)
 530   1        {
 531   2          UART_Tx_Str("ERR: Str_Join Ptr\r");
 532   2          return ERR_NULL_PTR;
 533   2        }
 534   1        
 535   1          for(str_join_str_index = 0 ; ((*(left_src_str + str_join_str_index)) != NULL_CHAR); ++str_join_str_ind
             -ex)
 536   1        {
 537   2          if(str_join_str_index + 1 >= STR_MAX_NUM_CHARS)
C51 COMPILER V9.60.0.0   MAIN                                                              09/19/2022 14:27:12 PAGE 10  

 538   2          {
 539   3            UART_Tx_Str("ERR: Str_Join left Str\r");
 540   3            return ERR_DATA_NOT_IN_RANGE;
 541   3          }
 542   2          *(str_join_str + str_join_str_index) = *(left_src_str + str_join_str_index);
 543   2        }
 544   1           
 545   1          for (src_str_index = 0; (*((right_src_str + src_str_index)) != NULL_CHAR); ++src_str_index, ++str_join
             -_str_index) 
 546   1        {
 547   2          if(str_join_str_index + 1 >= STR_MAX_NUM_CHARS)
 548   2          {
 549   3            UART_Tx_Str("ERR: Str_Join right Str\r");
 550   3            return ERR_DATA_NOT_IN_RANGE;
 551   3          }
 552   2              *(str_join_str + str_join_str_index) = *(right_src_str + src_str_index); 
 553   2        }
 554   1          *(str_join_str + str_join_str_index) = NULL_CHAR;
 555   1        
 556   1         /* #ifdef TRACE
 557   1          UART_Tx_Str(str_join_str);
 558   1          UART_Tx_Char(NEXT_LINE_CHAR);
 559   1        #endif  */
 560   1        
 561   1        return SUCCESS;
 562   1      }
 563          
 564          /*------------------------------------------------------------*
 565          FUNCTION NAME  : Str_Cat
 566          
 567          DESCRIPTION    :
 568                          
 569          INPUT          : 
 570          
 571          OUTPUT         : 
 572          
 573          NOTE           : 
 574          
 575          Func ID        :    
 576          -*------------------------------------------------------------*/
 577          unsigned int Str_Cat(char *const str_cat_str, const char *const src_str)
 578          {
 579   1        unsigned char str_cat_str_index = 0, src_str_index;
 580   1        
 581   1        if(str_cat_str == NULL_PTR || src_str == NULL_PTR)
 582   1        {
 583   2          UART_Tx_Str("ERR: Str_Cat Ptr\r");
 584   2          return ERR_NULL_PTR;
 585   2        } 
 586   1          while (((*(str_cat_str + str_cat_str_index)) != NULL_CHAR) )
 587   1        {
 588   2          if(str_cat_str_index + 1 >= STR_MAX_NUM_CHARS)
 589   2            return ERR_DATA_NOT_IN_RANGE;
 590   2              ++str_cat_str_index;
 591   2        } 
 592   1         // concatenate str_cat_str to src_str
 593   1          for (src_str_index = 0; ((*(src_str + src_str_index)) != NULL_CHAR); ++src_str_index, ++str_cat_str_in
             -dex) 
 594   1        {
 595   2          if(str_cat_str_index + 1 >= STR_MAX_NUM_CHARS)
 596   2          {
 597   3            UART_Tx_Str("ERR: Str_Cat chars\r");
C51 COMPILER V9.60.0.0   MAIN                                                              09/19/2022 14:27:12 PAGE 11  

 598   3            return ERR_DATA_NOT_IN_RANGE;
 599   3          }
 600   2              *(str_cat_str + str_cat_str_index) = *(src_str + src_str_index);  
 601   2        }
 602   1          *(str_cat_str + str_cat_str_index) = NULL_CHAR;
 603   1        
 604   1        return SUCCESS;
 605   1      }
 606          
 607          /*------------------------------------------------------------------*-
 608            ---- END OF FILE -------------------------------------------------
 609          -*------------------------------------------------------------------*/   


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2150    ----
   CONSTANT SIZE    =    423    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     58      75
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
